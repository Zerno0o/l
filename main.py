import sounddevice as sd
import numpy as np
import scipy.io.wavfile as wav
import speech_recognition as sr
import random
from googletrans import Translator
from collections import defaultdict

def self():
    recognizer = sr.Recognizer()
    with sr.AudioFile("output.wav") as source:
        self.words = {
        "easy": ["–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "—è–±–ª–æ–∫–æ", "–º–æ–ª–æ–∫–æ", "—Å–æ–ª–Ω—Ü–µ"],
        "medium": ["–±–∞–Ω–∞–Ω", "—à–∫–æ–ª–∞", "–¥—Ä—É–≥", "–æ–∫–Ω–æ", "–∂—ë–ª—Ç—ã–π"],
        "hard": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ", "–≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]}
        self.scores = defaultdict(int)
        self.current_level = 'easy'
        self.lives = 3
        self.recognizer = sr.Recognizer()
         
    
    def select_level(self):
        self.speak("\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
        self.speak("1 - –õ–µ–≥–∫–∏–π")
        self.speak("2 - –°—Ä–µ–¥–Ω–∏–π")
        self.speak("3 - –°–ª–æ–∂–Ω—ã–π")
        
        
        choice = self.listen()
        if '1' in choice or '–ª–µ–≥–∫' in choice:
            self.current_level = 'easy'
        elif '2' in choice or '—Å—Ä–µ–¥–Ω' in choice:
            self.current_level = 'medium'
        elif '3' in choice or '—Å–ª–æ–∂–Ω' in choice:
            self.current_level = 'hard'
        else:
            self.speak("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return True
    duration = 5  # —Å–µ–∫—É–Ω–¥—ã –∑–∞–ø–∏—Å–∏
    sample_rate = 44100

    print("–ì–æ–≤–æ—Ä–∏...")
    recording = sd.rec(
    int(duration * sample_rate), # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å—ç–º–ø–ª–∞—Ö
    samplerate=sample_rate,      # —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    channels=1,                  # 1 ‚Äî —ç—Ç–æ –º–æ–Ω–æ
    dtype="int16")               # —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
    sd.wait()  # –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏

wav.write("output.wav", sample_rate, recording)
print("–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º...")

recognizer = sr.Recognizer()
with sr.AudioFile("output.wav") as source:
    audio = recognizer.record(source)

    def play_round(self):
        if not self.words[self.current_level]:
            self.speak("–í —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!")
            return True
        
        word, translation = random.choice(list(self.words[self.current_level].items()))
        
        self.speak(f"\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: {word}")
        self.speak("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞")
        
        user_translation = self.listen()
        
        if user_translation and translation.lower() in user_translation:
            self.speak("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç")
            self.scores[self.current_level] += 1
            del self.words[self.current_level][word]
        else:
            self.speak(f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: '{translation}'")
            self.lives -= 1
            self.speak(f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {self.lives} –∂–∏–∑–Ω–µ–π")
        
        return self.lives > 0
    
    def show_stats(self):
        self.speak("\n–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for level, score in self.scores.items():
            self.speak(f"{level.capitalize()}: {score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    
    def run(self):
        self.speak("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤—É—é –∏–≥—Ä—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤!")
        self.speak("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.")
        self.speak("–£ –≤–∞—Å –µ—Å—Ç—å 3 –∂–∏–∑–Ω–∏. –ü–æ—Å–ª–µ 3 –æ—à–∏–±–æ–∫ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.")
        
        while True:
            if not self.select_level():
                break
            
            self.speak(f"\n–£—Ä–æ–≤–µ–Ω—å: {self.current_level.capitalize()}")
            if not self.play_round():
                self.speak("\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –∂–∏–∑–Ω–∏.")
                break
            
            cont = self.listen()
            if '–Ω–µ—Ç' in cont or '—Ö–≤–∞—Ç–∏—Ç' in cont or '—Å—Ç–æ–ø' in cont:
                break
        
        self.show_stats()
        self.speak("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
