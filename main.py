import sounddevice as sd
import numpy as np
import scipy.io.wavfile as wav
import speech_recognition as sr
import random
import os
from time import sleep

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
duration = 5  # —Å–µ–∫—É–Ω–¥—ã –∑–∞–ø–∏—Å–∏
sample_rate = 44100

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
recognizer = sr.Recognizer()
score = 0
mistakes = 0
max_mistakes = 3
highscore_file = "highscore.txt"

# –°–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (—Ä—É—Å—Å–∫–∏–π: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
words = {
    "easy": {
        "—è–±–ª–æ–∫–æ": "apple",
        "–∫–æ—Ç": "cat",
        "—Å–æ–±–∞–∫–∞": "dog",
        "–¥–æ–º": "house",
        "–∫–Ω–∏–≥–∞": "book",
        "—Å–æ–ª–Ω—Ü–µ": "sun",
        "–≤–æ–¥–∞": "water"
    },
    "medium": {
        "–æ–≥–æ–Ω—å": "fire",
        "–¥–µ—Ä–µ–≤–æ": "tree",
        "–≥–æ—Ä–æ–¥": "city",
        "—Ä–∞–±–æ—Ç–∞": "work",
        "—à–∫–æ–ª–∞": "school",
        "—É—á–µ–±–∞": "study",
        "–¥–µ–Ω—å–≥–∏": "money"
    },
     "hard": {
        "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "attraction",
        "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç": "experiment",
        "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ": "research",
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è": "technology",
        "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ": "state",
        "–æ–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞": "environment",
        "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ": "interaction"
    }
}

def record_audio():
    """–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
    print("–ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å...")
    audio = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='int16')
    sd.wait()
    return audio
def save_and_recognize(audio):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å"""
    temp_file = "temp.wav"
    wav.write(temp_file, sample_rate, audio)
    
    with sr.AudioFile(temp_file) as source:
        audio_data = recognizer.record(source)
        try:
            text = recognizer.recognize_google(audio_data, language='en-US')
            print(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
            return text.lower()
        except sr.UnknownValueError:
            print("–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            return None
        finally:
            if os.path.exists(temp_file):
                os.remove(temp_file)

def load_highscore():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∫–æ—Ä–¥ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(highscore_file):
        with open(highscore_file, 'r') as f:
            try:
                return int(f.read())
            except:
                return 0
    return 0

def save_highscore(new_score):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥"""
    with open(highscore_file, 'w') as f:
        f.write(str(new_score))

def select_level():
    """–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
    print("1 - –õ–µ–≥–∫–∏–π (Easy)")
    print("2 - –°—Ä–µ–¥–Ω–∏–π (Medium)")
    print("3 - –°–ª–æ–∂–Ω—ã–π (Hard)")
    
    while True:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ")
        if choice == '1':
            return 'easy'
        elif choice == '2':
            return 'medium'
        elif choice == '3':
            return 'hard'
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

def play_game(level):
    global score, mistakes
    
    level_words = words[level]
    if not level_words:
        print("–í —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤!")
        return False

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    russian_word, correct_translation = random.choice(list(level_words.items()))
    
    print(f"\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: '{russian_word}'")
    print("–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
    sleep(1)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º –æ—Ç–≤–µ—Ç
    audio = record_audio()
    user_answer = save_and_recognize(audio)
    
    if user_answer is None:
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if user_answer == correct_translation:
        print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç")
        score += 1
    else:
        print(f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct_translation}'")
        mistakes += 1
        print(f"–û—à–∏–±–æ–∫: {mistakes}/{max_mistakes}")
    
    print(f"–°—á–µ—Ç: {score}")
    return mistakes < max_mistakes

if __name__ == "__main__":
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫'!")
    print(f"–£ –≤–∞—Å –µ—Å—Ç—å {max_mistakes} –ø–æ–ø—ã—Ç–∫–∏. –ü–æ—Å–ª–µ {max_mistakes} –æ—à–∏–±–æ–∫ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.")
    
    highscore = load_highscore()
    print(f"–¢–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥: {highscore}")
    
    while True:
        level = select_level()
        print(f"\n–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: {level.capitalize()}")
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        score = 0
        mistakes = 0

        while play_game(level):
            continue
        
        # –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
        print("\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")
        print(f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}")
        
        if score > highscore:
            print("–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! üéâ")
            save_highscore(score)
            highscore = score
        
        play_again = input("\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç): ").lower()
        if play_again != '–¥–∞':
            break
    
    print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
